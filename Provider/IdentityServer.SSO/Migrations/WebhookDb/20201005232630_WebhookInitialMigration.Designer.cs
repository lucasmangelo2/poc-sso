// <auto-generated />
using IdentityServer.SSO.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IdentityServer.SSO.Migrations.WebhookDb
{
    [DbContext(typeof(WebhookDbContext))]
    [Migration("20201005232630_WebhookInitialMigration")]
    partial class WebhookInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer.SSO.Model.WebhookDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WebhookDefinitions");
                });

            modelBuilder.Entity("IdentityServer.SSO.Model.WebhookEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<long>("WebhookDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WebhookEvents");
                });

            modelBuilder.Entity("IdentityServer.SSO.Model.WebhookSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("WebhookUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WebhookSubscriptions");
                });

            modelBuilder.Entity("IdentityServer.SSO.Model.WebhookSubscriptionRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("WebhookDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<long>("WebhookSubscriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebhookSubscriptionId");

                    b.ToTable("WebhookSubscriptionRelation");
                });

            modelBuilder.Entity("IdentityServer.SSO.Model.WebhookSubscriptionRelation", b =>
                {
                    b.HasOne("IdentityServer.SSO.Model.WebhookSubscription", null)
                        .WithMany("WebhooksRelated")
                        .HasForeignKey("WebhookSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
